// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// generator client {
//   provider   = "prisma-client-js"
//   engineType = "library"
// }

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTypeEnum {
  Admin
  Talent
  Scout
}

enum GenderEnum {
  Male
  Female
}

enum AccountStatusEnum {
  Active
  Suspended
  Closed
}

enum TransactionStatusEnum {
  Pending
  Paid
}

enum InvoiceStatusEnum {
  Draft
  AwaitingApproval
  AwaitingPayment
  Paid
  Void
}

model Nationality {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @unique() @db.VarChar(50)
  iso2          String   @unique() @db.Char(2)
  iso3          String   @unique() @db.Char(3)
  isoNumeric    String   @db.VarChar(3)
  phoneCode     String   @db.VarChar(50)
  continent     String?  @db.VarChar(20)
  capital       String   @db.VarChar(50)
  timeZone      String   @db.VarChar(50)
  currency      String   @db.VarChar(20)
  symbol        String?  @db.VarChar(5)
  wholePart     String?  @db.VarChar(20)
  fractionPart  String?  @db.VarChar(20)
  languageCodes String?  @db.VarChar(100)
  perUserPrice  Float    @default(0.00) @db.DoublePrecision()
  status        Boolean  @default(false) @db.Boolean
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  createdBy     String?  @db.Uuid
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy     String?  @db.Uuid
  states        State[]
  users         User[]

  @@map("nationality")
}

model State {
  id            String      @id @default(uuid()) @db.Uuid
  name          String      @unique() @db.VarChar(50)
  iso2          String      @unique() @db.VarChar(10)
  nationalityId String      @db.Uuid
  status        Boolean     @default(true) @db.Boolean
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  createdBy     String?     @db.Uuid
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  updatedBy     String?     @db.Uuid
  nationality   Nationality @relation(fields: [nationalityId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("state")
}

model Address {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @db.Uuid
  name      String   @db.VarChar(50)
  street    String   @db.VarChar(150)
  city      String   @db.VarChar(50)
  state     String   @db.VarChar(50)
  zip       String   @db.VarChar(10)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  user      Profile  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("address")
}

model User {
  id                String           @id @default(uuid()) @db.Uuid
  roleId            String?          @db.Uuid
  nationalityId     String          @db.Uuid
  name              String           @db.VarChar(100)
  email             String           @unique @db.VarChar(100)
  age               Int?             @db.SmallInt
  password          String           @db.VarChar(100)
  avatar            String?          @db.VarChar(100)
  ageRange          String?          @db.VarChar(50)
  gender            GenderEnum?
  userType          UserTypeEnum?
  lastLogin         DateTime?        @db.Timestamptz(6)
  lastLoginIp       String?          @db.VarChar(50)
  defaultPage       String?          @db.VarChar(50)
  passwordUpdatedAt DateTime?        @default(now()) @db.Timestamptz(6)
  passwordLockedAt  DateTime?        @db.Timestamptz(6)
  passwordHistory   Json?            @db.JsonB
  passwordAttempt   Int?             @db.SmallInt
  status            Boolean          @default(false) @db.Boolean
  createdAt         DateTime         @default(now()) @db.Timestamptz(6)
  createdBy         String?          @db.Uuid
  updatedAt         DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy         String?          @db.Uuid
  nationality       Nationality     @relation(fields: [nationalityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role              Role?            @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile           Profile?
  billing           Billing[]
  invoice           Invoice[]
  scoutWatchList    ScoutWatchList[]
  playerPosition    PlayerPosition[]

  @@map("user")
}

model Role {
  id              String               @id @default(uuid()) @db.Uuid
  name            String               @unique() @db.VarChar(50)
  description     String?              @db.VarChar(500)
  code            String?              @unique() @db.VarChar(20)
  type            UserTypeEnum?
  defaultPage     String?              @db.VarChar(50)
  status          Boolean              @default(true) @db.Boolean
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  createdBy       String?              @db.Uuid
  updatedAt       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy       String?              @db.Uuid
  users           User[]
  menuPermissions RoleMenuPermission[]

  @@map("role")
}

model RoleMenuPermission {
  id         String   @id @default(uuid()) @db.Uuid
  roleId     String   @unique @db.Uuid
  permission Boolean  @default(false) @db.Boolean
  status     Boolean  @default(true) @db.Boolean
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  createdBy  String?  @db.Uuid
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?  @db.Uuid
  role       Role     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("role_menu_permission")
}

model Profile {
  id              String        @id @default(uuid()) @db.Uuid
  userId          String        @unique @db.Uuid
  nationalityId   String?       @db.Uuid
  age             Int?          @db.SmallInt
  phoneNo         String?       @db.VarChar(15)
  firstName       String        @db.VarChar(100)
  lastName        String        @db.VarChar(100)
  brandName       String?       @db.VarChar(100)
  weight          String?       @db.VarChar(100)
  height          String?       @db.VarChar(100)
  powerFoot       String?       @db.VarChar(100)
  appearances     String?       @db.VarChar(100)
  avatar          String?       @db.VarChar(100)
  backgroundImage String?       @db.VarChar(100)
  website         String?       @db.VarChar(100)
  description     String?       @db.VarChar(255)
  status          Boolean       @default(true) @db.Boolean
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  createdBy       String?       @db.Uuid
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy       String?       @db.Uuid
  user            User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address         Address[]
  socialMedia     SocialMedia[]
  gallery         Gallery[]
  playerCard      PlayerCard[]

  @@map("user_profile")
}

model PlayerCard {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @db.Uuid
  name      String   @db.VarChar(50)
  value     String   @db.VarChar(50)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SocialMedia {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @unique @db.Uuid
  name      String   @db.VarChar(50)
  baseUrl   String   @db.VarChar(100)
  username  String   @db.VarChar(50)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  user      Profile  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("social_media")
}

model PlayerPosition {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  name        String   @unique @db.VarChar(150)
  code        String?  @unique @db.VarChar(10)
  description String?  @db.VarChar(255)
  status      Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("player-position")
}

model Gallery {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @db.Uuid
  url       String   @unique @db.VarChar(100)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("trip_images")
}

model ScoutWatchList {
  id        String   @id @default(uuid()) @db.Uuid
  talentId  String   @db.Uuid
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  talent    User     @relation(fields: [talentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("scout_watch_list")
}

model Inquiries {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(50)
  email     String   @db.VarChar(100)
  message   String   @db.VarChar(255)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  @@map("inquiries")
}

model FootballClub {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(100)
  logo      String?  @db.VarChar(100)
  country   String   @db.VarChar(100)
  city      String   @db.VarChar(100)
  stadium   String   @db.VarChar(100)
  founded   String   @db.VarChar(50)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  @@map("football_club")
}

model Billing {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  cardNumber    String   @unique @db.VarChar(16)
  cardType      String   @db.VarChar(50)
  cardName      String   @db.VarChar(50)
  cardExpiry    String   @db.VarChar(5)
  cardCvv       String   @db.VarChar(3)
  commission    String?  @db.VarChar(5)
  discount      String?  @db.VarChar(5)
  paymentStatus Boolean  @default(false) @db.Boolean
  status        Boolean  @default(true) @db.Boolean
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  createdBy     String?  @db.Uuid
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy     String?  @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("billing")
}

model Transaction {
  id        String                @id @default(uuid()) @db.Uuid
  invoiceId String                @db.Uuid
  amount    String                @db.VarChar(50)
  status    TransactionStatusEnum @default(Pending)
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  createdBy String?               @db.Uuid
  updatedAt DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?               @db.Uuid
  invoice   Invoice               @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("transaction")
}

model Invoice {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  amount      String        @db.VarChar(50)
  name        String        @db.VarChar(50)
  status      Boolean       @default(true) @db.Boolean
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  createdBy   String?       @db.Uuid
  updatedAt   DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?       @db.Uuid
  user        User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction Transaction[]

  @@map("invoice")
}
